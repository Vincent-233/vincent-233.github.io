<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>人生短短几個秋</title>
    <link>https://vincent-233.github.io/</link>
    <description>Recent content on 人生短短几個秋</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Oct 2025 16:55:02 +0800</lastBuildDate><atom:link href="https://vincent-233.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DP-900 Azure Data Fundamentals笔记</title>
      <link>https://vincent-233.github.io/2025/10/23/dp-900-notes/</link>
      <pubDate>Thu, 23 Oct 2025 16:55:02 +0800</pubDate>
      
      <guid>https://vincent-233.github.io/2025/10/23/dp-900-notes/</guid>
      <description>上个月为了大致了解 Azure 上的 Data 相关服务，花了不到两周时间备考了一个DP-900 Azure Data Fundamentals认证，期间做了一些笔记，为了保持术语的</description>
    </item>
    
    <item>
      <title>Ubuntu通过Docker安装Oracle 12c并配置DBeaver连接</title>
      <link>https://vincent-233.github.io/2025/08/13/oracle_docker_install_ubuntu/</link>
      <pubDate>Wed, 13 Aug 2025 13:27:49 +0800</pubDate>
      
      <guid>https://vincent-233.github.io/2025/08/13/oracle_docker_install_ubuntu/</guid>
      <description>出于测试和学习的目的，最近想在Ubuntu Linux上安装oracle server端并在windows上通过客户端连接使用。发现可通过Doc</description>
    </item>
    
    <item>
      <title>RustDesk自建Server搭建</title>
      <link>https://vincent-233.github.io/2025/07/11/rustdesk-setup/</link>
      <pubDate>Fri, 11 Jul 2025 23:38:28 +0800</pubDate>
      
      <guid>https://vincent-233.github.io/2025/07/11/rustdesk-setup/</guid>
      <description>在没有公网IP的情况下想远程访问家里的电脑，网上有很多方法，之前也用过TeamViewer和向日葵，均需要注册账号，免费版会有更多限制，而且</description>
    </item>
    
    <item>
      <title>如何阅读一本书</title>
      <link>https://vincent-233.github.io/2025/05/01/how_to_read/</link>
      <pubDate>Thu, 01 May 2025 21:36:12 +0800</pubDate>
      
      <guid>https://vincent-233.github.io/2025/05/01/how_to_read/</guid>
      <description>偶然间刷到一个仅11页的小册子，由密西根大学教授Paul N. Edwards所写，原文在这里，本文记录一些我觉得有用的观点。 Note：这不是那本</description>
    </item>
    
    <item>
      <title>SQL Server中几个重要的SET OPTION，非必要不建议修改</title>
      <link>https://vincent-233.github.io/2025/03/23/mssql_two_common_set_option/</link>
      <pubDate>Sun, 23 Mar 2025 23:20:36 +0800</pubDate>
      
      <guid>https://vincent-233.github.io/2025/03/23/mssql_two_common_set_option/</guid>
      <description>为何写这个话题？因为项目中出现过几次有开发者copy之前的release脚本，没注意到其中的set option的影响，最终造成release</description>
    </item>
    
    <item>
      <title>OpenWrt安装代理软件</title>
      <link>https://vincent-233.github.io/2025/03/11/soft_router_usage/</link>
      <pubDate>Tue, 11 Mar 2025 21:18:39 +0800</pubDate>
      
      <guid>https://vincent-233.github.io/2025/03/11/soft_router_usage/</guid>
      <description>最近买了一款可安装软件的路由器，这里记录一下如何在上面安装代理软件openclash，建议路由器的 RAM 至少 256MB ，避免带不动的情况。 在网页版管理界</description>
    </item>
    
    <item>
      <title>IF语句会将@@ROWCOUNT重置为0</title>
      <link>https://vincent-233.github.io/2025/03/09/mssql_rowcount_variable/</link>
      <pubDate>Sun, 09 Mar 2025 17:14:40 +0800</pubDate>
      
      <guid>https://vincent-233.github.io/2025/03/09/mssql_rowcount_variable/</guid>
      <description>最近遇到一个关于全局变量 @@ROWCOUNT 的值意外变化的问题，代码逻辑是根据不同条件执行不同的 SELECT 语句，然后记录返回行数，大致代码如下： DECLARE @type VARCHAR(20) = &amp;#39;A&amp;#39; IF @type = &amp;#39;A&amp;#39; BEGIN SELECT</description>
    </item>
    
    <item>
      <title>一些有用的T-SQL功能点</title>
      <link>https://vincent-233.github.io/2024/07/27/tsql_specfic_feature/</link>
      <pubDate>Sat, 27 Jul 2024 10:25:50 +0800</pubDate>
      
      <guid>https://vincent-233.github.io/2024/07/27/tsql_specfic_feature/</guid>
      <description>不同的SQL引擎在一定程度上支持SQL标准之外，还有一些自己的特有语法，一般称为SQL方言，本文主要记录我觉得比较有用的“冷门”SQL Ser</description>
    </item>
    
    <item>
      <title>关于回车换行符</title>
      <link>https://vincent-233.github.io/2024/07/26/notes_about_crlf/</link>
      <pubDate>Fri, 26 Jul 2024 00:07:19 +0800</pubDate>
      
      <guid>https://vincent-233.github.io/2024/07/26/notes_about_crlf/</guid>
      <description>术语 回车（Carriage Return, CR, ASCII 13, 通常表示为\r) 换行（Line Feed, LF, ASCII 10，通常表示为\n) 默认值 对于文本文件，Windows默认换行符号为</description>
    </item>
    
    <item>
      <title>SSIS脚本任务中动态引入外部dll</title>
      <link>https://vincent-233.github.io/2024/07/25/ssis_script_task_external_dll/</link>
      <pubDate>Thu, 25 Jul 2024 16:40:10 +0800</pubDate>
      
      <guid>https://vincent-233.github.io/2024/07/25/ssis_script_task_external_dll/</guid>
      <description>问题 SSIS Script Task中如果要引入第三方dll，通常可以将dll注册到GAC后引用，只要在本地和服务器上都注册，开发和部署都会比较方便，但注册GA</description>
    </item>
    
    <item>
      <title>DuckDB功能点介绍</title>
      <link>https://vincent-233.github.io/2024/07/13/duckdb_usage/</link>
      <pubDate>Sat, 13 Jul 2024 17:26:11 +0800</pubDate>
      
      <guid>https://vincent-233.github.io/2024/07/13/duckdb_usage/</guid>
      <description>前阵子浏览技术文章不经意间看到DuckDB，文章将它描述成为OLAP版本的SQLite，或嵌入式的PgSQL，有众多现代化分析型数据库的高级</description>
    </item>
    
    <item>
      <title>提升SSMS使用效率的一些Tips</title>
      <link>https://vincent-233.github.io/2023/12/19/ssms_tips/</link>
      <pubDate>Tue, 19 Dec 2023 00:11:23 +0800</pubDate>
      
      <guid>https://vincent-233.github.io/2023/12/19/ssms_tips/</guid>
      <description>本人工作中最常用的数据库就是Microsoft SQL Server，SSMS这个软件自然也是使用了多年，如果能搭配SQL Prompt这个插件，效率</description>
    </item>
    
    <item>
      <title>Git常见命令</title>
      <link>https://vincent-233.github.io/2023/12/17/git_notes_frequently_used_cmd/</link>
      <pubDate>Sun, 17 Dec 2023 21:40:52 +0800</pubDate>
      
      <guid>https://vincent-233.github.io/2023/12/17/git_notes_frequently_used_cmd/</guid>
      <description>简单罗列一下本人日常使用到的一些git命令 branch git branch -l # 列出本地分支 git branch -a # 列出分支（远程和本地） git branch &amp;lt;new branch name&amp;gt; # 从当前分支创建新分支 git checkout -b &amp;lt;new branch name&amp;gt; #</description>
    </item>
    
    <item>
      <title>Git Alias设置</title>
      <link>https://vincent-233.github.io/2023/12/17/git_alias_setup/</link>
      <pubDate>Sun, 17 Dec 2023 21:06:09 +0800</pubDate>
      
      <guid>https://vincent-233.github.io/2023/12/17/git_alias_setup/</guid>
      <description>一些有用的git command通常非常冗长，alias可以将一些常用的命令简化，从而提高效率。 本文介绍一下我个人使用的alias配置。 step 1 -</description>
    </item>
    
    <item>
      <title>配置Mac/Linux命令行中的Git显示当前Branch名称</title>
      <link>https://vincent-233.github.io/2023/11/16/git-mac-config-show-branch/</link>
      <pubDate>Thu, 16 Nov 2023 23:50:00 +0800</pubDate>
      
      <guid>https://vincent-233.github.io/2023/11/16/git-mac-config-show-branch/</guid>
      <description>问题 用过git for windows的都知道它可以在git repo目录下自动显示当前的branch名称，而且当前目录和命令缓冲区分两行显示： 在Ma</description>
    </item>
    
    <item>
      <title>Windows使用小技巧搜集</title>
      <link>https://vincent-233.github.io/2023/09/20/windows_tips_collect_keep_updating/</link>
      <pubDate>Wed, 20 Sep 2023 23:55:42 +0800</pubDate>
      
      <guid>https://vincent-233.github.io/2023/09/20/windows_tips_collect_keep_updating/</guid>
      <description>日常使用中搜集一些有用的windows平台小技巧，持续更新。 复制文件路径 (copy as path) 选中文件，正常右键菜单里没有复制文件路径的选项，按住shfit</description>
    </item>
    
    <item>
      <title>关于SQL Server SELECT语句列别名风格</title>
      <link>https://vincent-233.github.io/2023/09/20/about_column_alias_in_mssql/</link>
      <pubDate>Wed, 20 Sep 2023 00:55:30 +0800</pubDate>
      
      <guid>https://vincent-233.github.io/2023/09/20/about_column_alias_in_mssql/</guid>
      <description>注：每个人都有自己的偏好，本文仅为个人观点，且仅针对SQL Server。 公司现存的代码规范文档推荐在SELECT语句中用column_ali</description>
    </item>
    
    <item>
      <title>MSSQL 2016 - 2019，新功能</title>
      <link>https://vincent-233.github.io/2023/09/15/mssql_2016_to_2019_new_feature/</link>
      <pubDate>Fri, 15 Sep 2023 22:32:38 +0800</pubDate>
      
      <guid>https://vincent-233.github.io/2023/09/15/mssql_2016_to_2019_new_feature/</guid>
      <description>我最近才开始接触SQL Server 2019，从2014版本到2019它新增了很多功能，但我暂时都用不上，这里主要从一个传统的数据库开发者角度去记录一些</description>
    </item>
    
    <item>
      <title>Python运行MSSQL存储过程采坑记</title>
      <link>https://vincent-233.github.io/2023/08/21/notes_about_pyodbc_and_mssql_sp/</link>
      <pubDate>Mon, 21 Aug 2023 00:02:42 +0800</pubDate>
      
      <guid>https://vincent-233.github.io/2023/08/21/notes_about_pyodbc_and_mssql_sp/</guid>
      <description>虽然入门Python已经多年，但由于日常工作中，特别是生产环境上没有Python项目，对Python一直不算非常熟练，基本上只是偶尔用它在本</description>
    </item>
    
    <item>
      <title>windows batch script小结</title>
      <link>https://vincent-233.github.io/2023/03/05/windows-batch-script-quick-reference/</link>
      <pubDate>Sun, 05 Mar 2023 12:45:47 +0800</pubDate>
      
      <guid>https://vincent-233.github.io/2023/03/05/windows-batch-script-quick-reference/</guid>
      <description>&lt;p&gt;本文是关于windows batch script的简单小结，便于个人快速参考。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bcp导入导出报错，字段名含空格</title>
      <link>https://vincent-233.github.io/2023/02/10/bcp_format_file_error_with_space_in_column_name/</link>
      <pubDate>Fri, 10 Feb 2023 00:07:56 +0800</pubDate>
      
      <guid>https://vincent-233.github.io/2023/02/10/bcp_format_file_error_with_space_in_column_name/</guid>
      <description>问题描述 用SQL Server的bcp工具通过导入导出在不同server之间同步表数据，有使用format file，若表字段名称中含有空白字符</description>
    </item>
    
    <item>
      <title>T-SQL聚合拼接或求和，不可靠（SELECT @x = @x &#43; ...）</title>
      <link>https://vincent-233.github.io/2022/12/04/agg_select_string_concat_unreliable/</link>
      <pubDate>Sun, 04 Dec 2022 11:00:05 +0800</pubDate>
      
      <guid>https://vincent-233.github.io/2022/12/04/agg_select_string_concat_unreliable/</guid>
      <description>背景 写T-SQL的人经常会看到通过如下方式进行字符串拼接或求和： DECLARE @x_str VARCHAR(100) = &amp;#39;&amp;#39;, @x_sum INT = 0; -- 字符串拼接 SELECT @x_str = @x_str + col_str FROM Table_x; PRINT @x_str; -- 数值求和 SELECT @x_sum = @x_sum + col_int FROM Table_x;</description>
    </item>
    
    <item>
      <title>SQL Server无法删除快照</title>
      <link>https://vincent-233.github.io/2022/09/20/mssql_can_not_drop_snapshot/</link>
      <pubDate>Tue, 20 Sep 2022 00:56:10 +0800</pubDate>
      
      <guid>https://vincent-233.github.io/2022/09/20/mssql_can_not_drop_snapshot/</guid>
      <description>最近在服务器上发现了一个很早前建的snapshot，处于suspect状态，删除时会报错： Warning: Fatal error 615 occurred at xxxx. Note the error and time, and contact your system administrator. 网上搜索了发现资</description>
    </item>
    
    <item>
      <title>用selenium批量删除CSDN博客</title>
      <link>https://vincent-233.github.io/2022/09/18/delete_csdn_via_py_selenium/</link>
      <pubDate>Sun, 18 Sep 2022 23:32:21 +0800</pubDate>
      
      <guid>https://vincent-233.github.io/2022/09/18/delete_csdn_via_py_selenium/</guid>
      <description>需求与背景 本人早年在CSDN写博客，当时CSDN还是很不错的，论坛活跃，广告不多，也没有各种卖课引流的软文，内容上也无先审后发机制。后来发现</description>
    </item>
    
    <item>
      <title>自动为git commit message添加JIRA号</title>
      <link>https://vincent-233.github.io/2022/09/04/auto_add_jira_commit_msg/</link>
      <pubDate>Sun, 04 Sep 2022 18:59:49 +0800</pubDate>
      
      <guid>https://vincent-233.github.io/2022/09/04/auto_add_jira_commit_msg/</guid>
      <description>很多大企业都在用Atlassian全家桶，用JIRA/Confluence/Bitbucket强强组合进行敏捷开发。Bitbucket是Gi</description>
    </item>
    
    <item>
      <title>SQL Server空表依然占用空间</title>
      <link>https://vincent-233.github.io/2022/09/04/mssql_delete_no_space_release/</link>
      <pubDate>Sun, 04 Sep 2022 17:08:34 +0800</pubDate>
      
      <guid>https://vincent-233.github.io/2022/09/04/mssql_delete_no_space_release/</guid>
      <description>最近查看表空间占用情况时，发现有个表行数为0，但占用空间依然非常高，对database进行Shrink也不会释放，百思不得其解，后面查资料发</description>
    </item>
    
    <item>
      <title>关于SQL Server LocalDB的使用</title>
      <link>https://vincent-233.github.io/2022/04/23/about-mssql-local-db/</link>
      <pubDate>Sat, 23 Apr 2022 20:17:46 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2022/04/23/about-mssql-local-db/</guid>
      <description>日常工作电脑不方便自行安装SQL Server实例，服务器又是多人共享开发，权限也管理得很严格，不方便个人测试和临时数据存储，好在安装的SSD</description>
    </item>
    
    <item>
      <title>windows下robocopy的使用</title>
      <link>https://vincent-233.github.io/2022/03/26/robocopy-usage/</link>
      <pubDate>Sat, 26 Mar 2022 19:17:46 +0800</pubDate>
      
      <guid>https://vincent-233.github.io/2022/03/26/robocopy-usage/</guid>
      <description>robocopy是Windows平台下非常好用的同步工具，比起简单的copy，它的功能更强大 比如： 多线程模式。/MT选项 镜像模式，copy时</description>
    </item>
    
    <item>
      <title>windows conda环境在cmd/powershell/git-bash下的配置</title>
      <link>https://vincent-233.github.io/2021/08/15/conda-config-windows/</link>
      <pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2021/08/15/conda-config-windows/</guid>
      <description>在windows各类常用的命令行工具下如何快速启动Anaconda环境下的python呢？ 本文介绍一下我的配置。 cmd 任选一在PATH环境变量内</description>
    </item>
    
    <item>
      <title>关于python import的路径问题</title>
      <link>https://vincent-233.github.io/2021/08/08/119496995/</link>
      <pubDate>Sun, 08 Aug 2021 13:39:50 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2021/08/08/119496995/</guid>
      <description>模块（python module）就是一个python文件，包（package）就是一个带__init__.py文件的文件夹，可以理解为模块的</description>
    </item>
    
    <item>
      <title>SSIS - 旧版本OLEDB不支持Always On Availability Group</title>
      <link>https://vincent-233.github.io/2021/06/11/117827867/</link>
      <pubDate>Fri, 11 Jun 2021 23:22:57 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2021/06/11/117827867/</guid>
      <description>问题 数仓项目中有上游将SQL Server升级为Always On高可用集群，导致我们使用OLEDB连接方式的SSIS Package在运行时出现</description>
    </item>
    
    <item>
      <title>Windows下快速合并文本文件</title>
      <link>https://vincent-233.github.io/2021/05/16/116887159/</link>
      <pubDate>Sun, 16 May 2021 12:01:29 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2021/05/16/116887159/</guid>
      <description>需求：将当前目录下所有文本文件合并成一个新文件。 CMD实现 copy *.txt cmd_new.txt 以上写法有个小小不足之处，若有文件最后一行无换行符，合并后会出现后一个文件的</description>
    </item>
    
    <item>
      <title>排序算法-快速排序（Quick Sort）</title>
      <link>https://vincent-233.github.io/2021/01/02/112072915/</link>
      <pubDate>Sat, 02 Jan 2021 00:34:32 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2021/01/02/112072915/</guid>
      <description>关于Quick Sort的介绍网上资料非常多，本文仅是我重新学习此算法时的笔记，如有纰漏，还请网友指出。 快排算法利用分治法（divide and co</description>
    </item>
    
    <item>
      <title>pandas数据处理，字符串先拆分再合并</title>
      <link>https://vincent-233.github.io/2020/06/23/106913549/</link>
      <pubDate>Tue, 23 Jun 2020 00:45:35 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2020/06/23/106913549/</guid>
      <description>概述 实现之前文章中用SQL实现的功能： 得益于python简洁的表达式，以及pandas库的强大功能，实现起来非常轻松，关键代码仅三行： 代码 读</description>
    </item>
    
    <item>
      <title>pandas数据处理，行列转换</title>
      <link>https://vincent-233.github.io/2020/06/21/106893478/</link>
      <pubDate>Sun, 21 Jun 2020 23:55:02 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2020/06/21/106893478/</guid>
      <description>概述 用Python实现之前文章中用SQL实现的转换，交叉表转为长宽表。 数据准备 import pandas as pd df = pd.read_csv(r&amp;#39;D:\CategoryConfig.csv&amp;#39;) df Category Level A B C D 0 Online 1 234 345 644 987 1 Online 2 213 456 543 657 2 Online 3</description>
    </item>
    
    <item>
      <title>sqlcmd使用体验</title>
      <link>https://vincent-233.github.io/2020/06/14/106740950/</link>
      <pubDate>Sun, 14 Jun 2020 17:02:48 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2020/06/14/106740950/</guid>
      <description>为何要用SQLCMD 平时习惯了在SSMS中做开发，有什么变动也直接在SSMS的查询界面中执行，更新的对象和步骤少还好，如果一下子需要执行非常</description>
    </item>
    
    <item>
      <title>SQL数据处理，字符串先拆分后合并</title>
      <link>https://vincent-233.github.io/2020/06/13/106734253/</link>
      <pubDate>Sat, 13 Jun 2020 17:35:24 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2020/06/13/106734253/</guid>
      <description>需求 以上数据样例，需要转为： 实际业务数据可能不止以上两列，而且数据量比较大，实现时要考虑性能。 本文用SQL实现。 思路 看上去是简单的字符串拆分</description>
    </item>
    
    <item>
      <title>无管理员权限如何运行Everything</title>
      <link>https://vincent-233.github.io/2020/05/16/106153966/</link>
      <pubDate>Sat, 16 May 2020 09:23:58 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2020/05/16/106153966/</guid>
      <description>场景 公司电脑无管理员权限，无法自行安装软件，经申请安装上了everything（通过域管理自动安装），但启动时提示需要管理员权限，让输入账号</description>
    </item>
    
    <item>
      <title>算法-递归-排列组合</title>
      <link>https://vincent-233.github.io/2020/05/03/105907225/</link>
      <pubDate>Sun, 03 May 2020 19:51:39 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2020/05/03/105907225/</guid>
      <description>本文主要用递归算法解决大家非常熟悉的排列组合问题。 组合 方法一 需求：求从含m个数据中取出n个数据的所有取法。 解析：设列表为a[m]，从m个数取</description>
    </item>
    
    <item>
      <title>算法-求集合所有子集</title>
      <link>https://vincent-233.github.io/2020/05/03/105901441/</link>
      <pubDate>Sun, 03 May 2020 15:27:11 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2020/05/03/105901441/</guid>
      <description>问题：求集合所有子集。 下面分别给出两种思路的递归和非递归解法，用python实现。 方法一 a的子集可以分为两部分： 不含a[0]的所有子集 含a[</description>
    </item>
    
    <item>
      <title>Python深拷贝与浅拷贝说明与举例</title>
      <link>https://vincent-233.github.io/2020/05/02/105887338/</link>
      <pubDate>Sat, 02 May 2020 12:08:21 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2020/05/02/105887338/</guid>
      <description>知识准备 可变类型(mutable)：list、set、dict可变类型，支持原地址直接改变元素（item）的值 不可变类型(immutable</description>
    </item>
    
    <item>
      <title>根据日历表生成财年及周编号</title>
      <link>https://vincent-233.github.io/2020/03/20/104987643/</link>
      <pubDate>Fri, 20 Mar 2020 16:02:29 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2020/03/20/104987643/</guid>
      <description>概述 数仓中经常会有一张日历维表，里面预存了很多日期截取和计算相关的字段，便于与事实表关联之后进行各类基于日期相关的分析。 现假定已有日历维表字</description>
    </item>
    
    <item>
      <title>使用python的faker库和dataclass快速生成测试数据</title>
      <link>https://vincent-233.github.io/2020/03/01/104597650/</link>
      <pubDate>Sun, 01 Mar 2020 19:42:31 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2020/03/01/104597650/</guid>
      <description>上一篇介绍了如何用纯SQL生成测试数据，但SQL功能有限，本篇介绍python faker库的使用。 需求 生成5000条记录，字段如下： fake</description>
    </item>
    
    <item>
      <title>数据库生成测试数据（SQL实现）</title>
      <link>https://vincent-233.github.io/2020/03/01/104594475/</link>
      <pubDate>Sun, 01 Mar 2020 18:19:13 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2020/03/01/104594475/</guid>
      <description>需求 项目中偶尔会有造数据进行测试的情况，根据常见的数据特征，我这里假设数据某表Table_X含4个字段，每个字段的要求如下，需要造出5000</description>
    </item>
    
    <item>
      <title>Python并发之异步编程框架AsyncIO简介</title>
      <link>https://vincent-233.github.io/2020/02/06/104168699/</link>
      <pubDate>Thu, 06 Feb 2020 12:20:25 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2020/02/06/104168699/</guid>
      <description>在进入并发编程的世界之前，先看一个对比的例子： 举例 串行执行 import time def count(task_name): print(task_name,time.strftime(&amp;#34;%X&amp;#34;),&amp;#34;One&amp;#34;) time.sleep(1) # 模拟一个需要堵塞一秒的任务 print(task_name,time.strftime(&amp;#34;%X&amp;#34;),&amp;#34;Two&amp;#34;) def main(): count(&amp;#39;Task-A&amp;#39;) count(&amp;#39;Task-B&amp;#39;) count(&amp;#39;Task-C&amp;#39;) if __name__ == &amp;#34;__main__&amp;#34;: s = time.time() main() elapsed = time.time() - s print(f&amp;#34;Total Run</description>
    </item>
    
    <item>
      <title>Python装饰器</title>
      <link>https://vincent-233.github.io/2020/02/02/104148685/</link>
      <pubDate>Sun, 02 Feb 2020 20:41:35 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2020/02/02/104148685/</guid>
      <description>装饰器（decorator）是python特有的语法特性，通过函数封装扩展原函数的功能。 下面一步步通过例子说明它的作用和用法。 函数中定义函数</description>
    </item>
    
    <item>
      <title>多表Full Outer Join的问题</title>
      <link>https://vincent-233.github.io/2020/01/10/103895643/</link>
      <pubDate>Fri, 10 Jan 2020 11:39:54 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2020/01/10/103895643/</guid>
      <description>熟悉SQL的开发者都知道Full Join（同Full Outer Join）是左右两个表的记录都取，但若多个表之间Full Join，较容易出现意料之外的</description>
    </item>
    
    <item>
      <title>PowerShell调用外部程序或脚本的几种方式</title>
      <link>https://vincent-233.github.io/2019/12/30/103766391/</link>
      <pubDate>Mon, 30 Dec 2019 14:59:50 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/12/30/103766391/</guid>
      <description>PowerShell调用外部程序或脚本的方式非常多，下面总结几种调用方式和常规用法。 1. 直接调用 优点：简单易用，但可能不够稳定 说明：直接用程序</description>
    </item>
    
    <item>
      <title>SSIS读取Excel空值问题解决</title>
      <link>https://vincent-233.github.io/2019/12/04/103395928/</link>
      <pubDate>Wed, 04 Dec 2019 23:54:10 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/12/04/103395928/</guid>
      <description>SSIS抽Excel数据，遇到一些问题，特将解决办法记录之，一来备忘，二来给广大开发网友提供参考： 数据访问驱动问题 报错：Microsoft.</description>
    </item>
    
    <item>
      <title>DTExec运行SSIS包日志设置无效问题解决</title>
      <link>https://vincent-233.github.io/2019/11/29/103303254/</link>
      <pubDate>Fri, 29 Nov 2019 00:29:45 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/11/29/103303254/</guid>
      <description>问题描述 Package属性中开启了Logging功能，设置将Log写到SQL Server，在SSDT中运行时，一切正常，日志有写到所设置数据</description>
    </item>
    
    <item>
      <title>SSIS部署报6522错误问题解决</title>
      <link>https://vincent-233.github.io/2019/11/26/103266182/</link>
      <pubDate>Tue, 26 Nov 2019 22:36:01 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/11/26/103266182/</guid>
      <description>问题描述 今日试验SSIS部署，没想到报错了，无论用SSDT或SSMS部署，最后都会报错：在执行用户定义例程或聚合&amp;quot;deploy_p</description>
    </item>
    
    <item>
      <title>python面向对象举例</title>
      <link>https://vincent-233.github.io/2019/11/16/103103791/</link>
      <pubDate>Sat, 16 Nov 2019 23:31:52 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/11/16/103103791/</guid>
      <description>概述 面向对象三大特性：封装、继承、多态，本文通过类继承和方法覆盖的例子来说明python的面向对象编程。 功能说明 实现“数列”基类，然后通过继</description>
    </item>
    
    <item>
      <title>python操作符重载特殊方法列表</title>
      <link>https://vincent-233.github.io/2019/11/16/103104203/</link>
      <pubDate>Sat, 16 Nov 2019 22:58:07 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/11/16/103104203/</guid>
      <description>如下表，python类只要实现了右边所示特殊名称的方法，就实现了操作符重载，可使用左边的操作符语法： Common Syntax Special Method Form a + b a._add_(b); alternatively b._radd_(a) a − b a._sub_(b); alternatively b._rsub_(a) a b a._mul_(b);</description>
    </item>
    
    <item>
      <title>全排列递归算法（Python实现）</title>
      <link>https://vincent-233.github.io/2019/11/08/102962911/</link>
      <pubDate>Fri, 08 Nov 2019 17:36:52 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/11/08/102962911/</guid>
      <description>概述 本文由浅入深，由特殊到一般说明全排列的递归实现。 需求 编写程序，输出所有由a，b，c，d四个字母都出现一次所组成的字符串。 分析 这实际是全排</description>
    </item>
    
    <item>
      <title>python文件遍历与匹配过滤</title>
      <link>https://vincent-233.github.io/2019/10/31/102848314/</link>
      <pubDate>Thu, 31 Oct 2019 23:49:29 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/10/31/102848314/</guid>
      <description>路径/home/ghost/workspace/Other/结构如下 ├── git ├── input │ ├── csv │ │ ├── test_file_1.csv │ │ └── test_file_2.csv │ ├── test.csv │ ├── test_file_1.txt │</description>
    </item>
    
    <item>
      <title>深刻理解python变量</title>
      <link>https://vincent-233.github.io/2019/09/26/101398064/</link>
      <pubDate>Thu, 26 Sep 2019 00:17:56 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/09/26/101398064/</guid>
      <description>概述 python的标识符更像C++中的指针或JAVA中的引用变量，每个标识符与其所指向的内存地址相关联 像 b = a 这样赋值语句，就是为 a 起了一个</description>
    </item>
    
    <item>
      <title>Python数据库编程（以pyodbc和SQLAlchemy为例）</title>
      <link>https://vincent-233.github.io/2019/09/14/100814954/</link>
      <pubDate>Sat, 14 Sep 2019 00:34:24 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/09/14/100814954/</guid>
      <description>概述 本文以pyodbc和sqlalchemy操作SQL Server为例说明python的数据库编程。 pyodbc pyodbc只是众多python database dr</description>
    </item>
    
    <item>
      <title>SparkContext、SparkConf以及进化版的SparkSession</title>
      <link>https://vincent-233.github.io/2019/08/17/99697500/</link>
      <pubDate>Sat, 17 Aug 2019 20:32:37 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/08/17/99697500/</guid>
      <description>Spark 2.0之前 需要显式地创建SparkConf实例，并用Conf实例初始化SparkContext，再用SparkContext创建SQLCo</description>
    </item>
    
    <item>
      <title>pyspark读写S3文件与简单处理（指定Schema，直接写S3或先本地再上传）</title>
      <link>https://vincent-233.github.io/2019/08/17/99691961/</link>
      <pubDate>Sat, 17 Aug 2019 13:47:05 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/08/17/99691961/</guid>
      <description>概述 随着AWS的流行，越来越多的企业将数据存储在S3上构建数据湖，本文示例如何用PySpark读取S3上的数据，并用结构化API处理与展示，</description>
    </item>
    
    <item>
      <title>pyspark文件读写示例-（CSV/JSON/Parquet-单个或多个）</title>
      <link>https://vincent-233.github.io/2019/08/17/99691830/</link>
      <pubDate>Sat, 17 Aug 2019 05:11:47 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/08/17/99691830/</guid>
      <description>本文列举一些pyspark文件读写的示例代码 # 创建或获取会话 import pyspark from pyspark.sql import SparkSession spark = SparkSession.builder.appName(&amp;#39;Python Spark SQL example&amp;#39;).getOrCreate() 读取单个文件 CSV csv_path = &amp;#39;/home/ghost/workdata/patients.csv&amp;#39; df_patient = spark.read.format(&amp;#39;csv&amp;#39;)\ .option(&amp;#39;header&amp;#39;, &amp;#39;true&amp;#39;)\ .option(&amp;#39;inferSchema&amp;#39;, &amp;#39;true&amp;#39;)\ .load(csv_path) # 打印 dataframe 架构 df_patient.printSchema() root |-- patient_id:</description>
    </item>
    
    <item>
      <title>定时运行conda虚拟环境的python脚本，问题解决</title>
      <link>https://vincent-233.github.io/2019/08/10/99091928/</link>
      <pubDate>Sat, 10 Aug 2019 19:12:13 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/08/10/99091928/</guid>
      <description>问题场景 仅安装了conda版的python环境，需要在Task Schedule中定时运行某python脚本，可是直接在命令中运行python</description>
    </item>
    
    <item>
      <title>配置Jupyter Notebook允许远程访问</title>
      <link>https://vincent-233.github.io/2019/07/26/97418483/</link>
      <pubDate>Fri, 26 Jul 2019 21:38:21 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/07/26/97418483/</guid>
      <description>背景 虚拟机中安装了spark，想要在windows中直接练习pyspark的操作，但又不想在windows中再安装一次spark，于是想到了</description>
    </item>
    
    <item>
      <title>SQL Server用Cross Apply、Cross Join实现列转行</title>
      <link>https://vincent-233.github.io/2019/07/20/96520306/</link>
      <pubDate>Sat, 20 Jul 2019 01:16:07 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/07/20/96520306/</guid>
      <description>今天介绍4种列转行（又称宽表转长表、逆透视等）写法。 数据准备 CREATE TABLE Sales([Year] INT,Q1 INT,Q2 INT,Q3 INT,Q4 INT); GO INSERT INTO Sales([Year],Q1,Q2,Q3,Q4) VALUES (2017,12,123,324,123) ,(2018,13,455,324,878) ,(2019,29,786,473,633); SQL写法 UNION 最传统最通用写法 SELECT [Year],&amp;#39;Q1&amp;#39; AS [Quarter],Q1 AS Amount FROM Sales UNION ALL</description>
    </item>
    
    <item>
      <title>交叉表转换为横表</title>
      <link>https://vincent-233.github.io/2019/07/16/95868267/</link>
      <pubDate>Tue, 16 Jul 2019 15:36:14 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/07/16/95868267/</guid>
      <description>做BI或数据分析时，经常会遇到各类格式转换，这里将最近遇到的一个例子记录一下，分享几种SQL写法。 需求 千言万语抵不上一张图： 数据准备 CREATE TABLE dbo.CategoryConfig(Category VARCHAR(20),[Level]</description>
    </item>
    
    <item>
      <title>配置everything支持网络路径共享文件夹搜索</title>
      <link>https://vincent-233.github.io/2019/07/09/95170415/</link>
      <pubDate>Tue, 09 Jul 2019 10:15:53 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/07/09/95170415/</guid>
      <description>everything已经成为我windows平台下的重度依赖软件，其对本地文件的搜索高效快速准确，但默认是不支持网络路径文件夹内文件搜索的：</description>
    </item>
    
    <item>
      <title>Ubuntu关闭自动更新和GUI图形界面</title>
      <link>https://vincent-233.github.io/2019/06/17/92729385/</link>
      <pubDate>Mon, 17 Jun 2019 22:18:02 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/06/17/92729385/</guid>
      <description>玩了一段时间Ubuntu之后发现很多操作还是用命令行更方便，GUI显得没太多作用，毕竟Ubuntu只在VM中，GUI有Windows或Mac</description>
    </item>
    
    <item>
      <title>用VBA将xml格式的excel另存为xlsx</title>
      <link>https://vincent-233.github.io/2019/06/15/92030849/</link>
      <pubDate>Sat, 15 Jun 2019 01:46:26 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/06/15/92030849/</guid>
      <description>需求背景 需要将从数据库提取的数据交给用户，由于数据量较大（好几十万行），若导出为有固定分隔符的文本文件给用户，一来体验上不太好，二来若文本字</description>
    </item>
    
    <item>
      <title>VIM常用命令</title>
      <link>https://vincent-233.github.io/2019/05/26/90581596/</link>
      <pubDate>Sun, 26 May 2019 22:09:42 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/05/26/90581596/</guid>
      <description>vim 选择文本，删除，复制，粘贴 文本的选择，对于编辑器来说，是很基本的东西，也经常被用到，总结如下： v 从光标当前位置开始，光标所经过的地方会被选</description>
    </item>
    
    <item>
      <title>虚拟机Linux安装PostgreSQL，并让宿主机连接</title>
      <link>https://vincent-233.github.io/2019/05/14/90217603/</link>
      <pubDate>Tue, 14 May 2019 23:41:55 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/05/14/90217603/</guid>
      <description>安装PostgreSQL 运行如下命令进行安装： sudo apt-get install postgresql Linux本地登陆并修改密码 安装完成之后，Linux会自动创建postgres同名账户</description>
    </item>
    
    <item>
      <title>SVN批量移动文件，并保留版本日志</title>
      <link>https://vincent-233.github.io/2019/04/27/89609806/</link>
      <pubDate>Sat, 27 Apr 2019 23:37:19 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/04/27/89609806/</guid>
      <description>场景 希望将SVN文件移动到其它文件夹下，且保存SVN日志。如果是少数几个文件还好 ，对每个文件分别用SVN的rename功能（或选中多个右键拖</description>
    </item>
    
    <item>
      <title>Pandas读取Excel数据，简单清洗后存入数据库</title>
      <link>https://vincent-233.github.io/2019/04/18/89390714/</link>
      <pubDate>Thu, 18 Apr 2019 23:32:36 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/04/18/89390714/</guid>
      <description>场景描述 客户提供的Excel文件，需要进行简单清洗之后导入数据库。 代码实现 import pandas as pd import numpy as np import os from sqlalchemy import create_engine from sqlalchemy import text from sqlalchemy.types import Integer from sqlalchemy.types import NVARCHAR # Excel文</description>
    </item>
    
    <item>
      <title>用SQL Workbench/J批量生成DDL和Insert脚本</title>
      <link>https://vincent-233.github.io/2019/04/14/89295092/</link>
      <pubDate>Sun, 14 Apr 2019 04:41:52 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/04/14/89295092/</guid>
      <description>最近项目上用到Amazon的Redshift数据库， 由于没有官方客户端，于是去网上找通用SQL客户端，发现一个叫SQL Workbench/J</description>
    </item>
    
    <item>
      <title>配置ubuntu允许远程SSH连接</title>
      <link>https://vincent-233.github.io/2019/04/13/89282667/</link>
      <pubDate>Sat, 13 Apr 2019 14:52:13 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/04/13/89282667/</guid>
      <description>前面有篇Blog记录了如何通过vagrant快速安装Ubuntu，但vagrant中的一些Box基本都是事先安装好了一些软件，做好了一些配置</description>
    </item>
    
    <item>
      <title>VirtualBox找不到桥接网卡问题解决</title>
      <link>https://vincent-233.github.io/2019/04/13/89281652/</link>
      <pubDate>Sat, 13 Apr 2019 13:56:35 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/04/13/89281652/</guid>
      <description>配置虚拟机桥接上网模式时，发现选择不了网卡，找资料发现需要在网络适配器中开启如下选项： 如果发现电脑上无此选项，可以如下操作： 找到virtua</description>
    </item>
    
    <item>
      <title>ls -l命令结果解析</title>
      <link>https://vincent-233.github.io/2019/04/09/89160917/</link>
      <pubDate>Tue, 09 Apr 2019 20:26:25 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/04/09/89160917/</guid>
      <description>使用Linux经常用到ls命令，若加上l参数，会用长格式的形式显示文件列表。如下图： vagrant@vagrant-ubuntu-trusty-64:~$ ls -l total 528 -rw-r--r-- 1 vagrant vagrant 1656 Jul 17 2015 cephalopods.txt -rw-r--r-- 1 vagrant vagrant 1264 Jul 17 2015 gastropods_draft.txt -rw-r--r-- 1 vagrant vagrant 1585</description>
    </item>
    
    <item>
      <title>Windows通过密钥SSH登陆Linux</title>
      <link>https://vincent-233.github.io/2019/04/08/89082770/</link>
      <pubDate>Mon, 08 Apr 2019 10:22:22 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/04/08/89082770/</guid>
      <description>概述 客户端通过密钥SSh登陆Linux的条件： 服务器端登陆账户home目录下的.ssh文件夹存在公钥，命名authorized_keys 客户</description>
    </item>
    
    <item>
      <title>用Vagrant快速安装Ubuntu</title>
      <link>https://vincent-233.github.io/2019/04/06/89053253/</link>
      <pubDate>Sat, 06 Apr 2019 11:10:57 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/04/06/89053253/</guid>
      <description>学习Uda的Linux免费入门课时知道了Vagrant，发现用它来安装Ubuntu非常方便快捷，特记录之。 安装virtual box vagrant</description>
    </item>
    
    <item>
      <title>Python对Excel求和、合并居中</title>
      <link>https://vincent-233.github.io/2019/04/01/88945745/</link>
      <pubDate>Mon, 01 Apr 2019 12:58:02 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2019/04/01/88945745/</guid>
      <description>需求 原始表格： 想在Total列中对每日的Amount进行汇总，然后对Date和Total进行合并居中，效果如下： 思路 遍历Excel行，从第一</description>
    </item>
    
    <item>
      <title>Set NoCount On导致触发器@@RowCount为0</title>
      <link>https://vincent-233.github.io/2018/12/18/85074737/</link>
      <pubDate>Tue, 18 Dec 2018 19:08:35 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2018/12/18/85074737/</guid>
      <description>今天无意中发现SQL Server一个疑似Bug的特性，特此记录。 由于对表的DML操作无论有无数据被影响，Trigger都会被执行，所以为提升</description>
    </item>
    
    <item>
      <title>再谈SQL Server字符串拆分与分列</title>
      <link>https://vincent-233.github.io/2018/12/08/84891624/</link>
      <pubDate>Sat, 08 Dec 2018 12:58:21 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2018/12/08/84891624/</guid>
      <description>字符串拆分函数 刚工作那会写了一篇关于字符串拆分的文章，那时仅仅是考虑实现就可以了，没考虑性能、简洁等因素，现总结一下常用方法以及优劣。 为了考</description>
    </item>
    
    <item>
      <title>报表动态MTD、YTD查询语句</title>
      <link>https://vincent-233.github.io/2018/10/08/82964958/</link>
      <pubDate>Mon, 08 Oct 2018 10:49:11 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2018/10/08/82964958/</guid>
      <description>经常会有报表需要动态查询MTD和YTD汇总。这里解释一下含义： MTD（Month To Date）：从月初到当前日期 YTD（Year To Date）：</description>
    </item>
    
    <item>
      <title>SQL Server Audit 功能体验</title>
      <link>https://vincent-233.github.io/2018/09/24/82832350/</link>
      <pubDate>Mon, 24 Sep 2018 21:52:38 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2018/09/24/82832350/</guid>
      <description>SQL Server 的Audit功能可以用来对数据库进行某种审计。下面用一个简单的例子来说明一下它的用法和效果。更多详细用法可翻阅联机丛书。 业务场景 对用户d</description>
    </item>
    
    <item>
      <title>SQL Server 邮件功能使用</title>
      <link>https://vincent-233.github.io/2018/08/07/81481585/</link>
      <pubDate>Tue, 07 Aug 2018 15:07:49 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2018/08/07/81481585/</guid>
      <description>SQL Server有自带的邮件服务，可以用它来做一些自动通知提醒的邮件，如警报和通知。下面总结一下它的配置与使用。 配置Database Mail 配置入口</description>
    </item>
    
    <item>
      <title>SQL Server FileStream 体验</title>
      <link>https://vincent-233.github.io/2018/06/03/80553895/</link>
      <pubDate>Sun, 03 Jun 2018 07:50:47 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2018/06/03/80553895/</guid>
      <description>FileStream是SQL Server 2008提供的新特性，之前附件在SQL的存储一种是直接放数据库，一种是存储一个路径，附件单独放在磁盘上。前一种</description>
    </item>
    
    <item>
      <title>SQL Server透明数据加密（TDE）实践</title>
      <link>https://vincent-233.github.io/2018/05/22/80404769/</link>
      <pubDate>Tue, 22 May 2018 14:19:56 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2018/05/22/80404769/</guid>
      <description>透明数据加密（Transparent Data Encryption）主要用于防止数据库文件被未经授权地拷贝或服务器被盗后通过附加/还原等操作访问数据</description>
    </item>
    
    <item>
      <title>SQL Server分区表实践</title>
      <link>https://vincent-233.github.io/2018/05/21/80387148/</link>
      <pubDate>Mon, 21 May 2018 00:38:33 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2018/05/21/80387148/</guid>
      <description>建立分区表的步骤： 新建文件组（FileGroups） 新建用于承载具体分区的文件组，数据库默认有只有一个Primary文件组。 也可以在单个文件</description>
    </item>
    
    <item>
      <title>关于MSSQL数据库隔离级别-快照(SnapShot)</title>
      <link>https://vincent-233.github.io/2018/05/01/80154338/</link>
      <pubDate>Tue, 01 May 2018 10:10:04 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2018/05/01/80154338/</guid>
      <description>在事务中将隔离级别设为SnapShot，可提升读写并发性能，防止脏读，这里简单介绍下设置使用方法 在单独事务中启用SNAPSHOT 不开启默认选</description>
    </item>
    
    <item>
      <title>SQL Server 常见For XML语句比较</title>
      <link>https://vincent-233.github.io/2018/04/29/80145292/</link>
      <pubDate>Sun, 29 Apr 2018 20:58:42 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2018/04/29/80145292/</guid>
      <description>SQL语句： SELECT TOP (3) a.orderid,b.companyname,c.firstname FROM Sales.MyOrders a INNER JOIN Sales.Customers b ON b.custid = a.custid INNER JOIN HR.Employees c ON a.empid = c.empid 结果： For XML Raw sql SELECT TOP(3) a.orderid,b.companyname,c.firstname FROM Sales.MyOrders a INNER JOIN Sales.Customers b ON b.custid = a.custid INNER JOIN HR.Employees c ON a.empid = c.empid FOR XML RAW 结果 说明 每一条记录</description>
    </item>
    
    <item>
      <title>SQL Server中的小数近似处理实例</title>
      <link>https://vincent-233.github.io/2017/08/10/77043631/</link>
      <pubDate>Thu, 10 Aug 2017 11:14:16 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2017/08/10/77043631/</guid>
      <description>-- 四舍五入，在小数点后1位舍入 SELECT ROUND(54.565,1) -- 54.600 -- 四舍五入，取整 SELECT ROUND(54.565,0) -- 55.000 -- 四舍五入，在小数点前1位舍入 SELECT ROUND(55.565,-1) -- 60.000 -- 向上取整 SELECT CEILING(34.634) -- 35 -- 向下取整 SELECT FLOOR(34.634) -- 34 -- 小</description>
    </item>
    
    <item>
      <title>SQL CLR函数（以正则表达式为例）</title>
      <link>https://vincent-233.github.io/2017/03/04/60332993/</link>
      <pubDate>Sat, 04 Mar 2017 17:13:51 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2017/03/04/60332993/</guid>
      <description>创建CLR程序集 VS中新建项目，类型为Database，模板选择SQL Server项目，然后在解决方案资源管理器中，选中项目，右键添加，选择</description>
    </item>
    
    <item>
      <title>DBA眼中的CLR (译)</title>
      <link>https://vincent-233.github.io/2017/03/04/60330115/</link>
      <pubDate>Sat, 04 Mar 2017 16:13:25 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2017/03/04/60330115/</guid>
      <description>SQL Server 2005引入CLR之后，开发者们热情地接受了它。 CLR作为一个强有力的工具，开发者可在数据库中利用它调用其他面向对象语言编写而成的功能。</description>
    </item>
    
    <item>
      <title>win10英文版安装笔记</title>
      <link>https://vincent-233.github.io/2015/09/26/48754333/</link>
      <pubDate>Sat, 26 Sep 2015 20:36:16 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2015/09/26/48754333/</guid>
      <description>下载与安装 1、在官网下载好系统安装工具，按工具提示，将安装包下载到本地或USB存储介质中; 2、第1步中我选择的是英文安装包，所以最后安装的是</description>
    </item>
    
    <item>
      <title>从登陆名与用户名的区别说起，谈SQL Server安全性初步</title>
      <link>https://vincent-233.github.io/2015/05/31/46288335/</link>
      <pubDate>Sun, 31 May 2015 14:17:04 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2015/05/31/46288335/</guid>
      <description>概述 登陆名的作用域是SQL Server数据库引擎，要连接到具体的数据库并进行相应操作，登陆名还需要映射到数据库用户名，并为用户名指定数据库角</description>
    </item>
    
    <item>
      <title>生成连续ID记录行</title>
      <link>https://vincent-233.github.io/2015/05/20/45874623/</link>
      <pubDate>Wed, 20 May 2015 19:44:59 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2015/05/20/45874623/</guid>
      <description>ID值记录行，即每一个数字一行的集合，有些时候在SQL中可以作为辅助表使用，从而用SQL的集合思维去高效解决问题，而不是用循环。 用自定义函数</description>
    </item>
    
    <item>
      <title>SQL Server事务性编程总结</title>
      <link>https://vincent-233.github.io/2015/05/17/45775271/</link>
      <pubDate>Sun, 17 May 2015 00:19:12 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2015/05/17/45775271/</guid>
      <description>为了保证数据的一致性，事务在数据库编程中经常用到，这里对T-SQL中事务的写法做一下总结与解读。 T-SQL中三种事务写法 SQL Sever 2000时代的写</description>
    </item>
    
    <item>
      <title>SQL Server返回随机记录</title>
      <link>https://vincent-233.github.io/2015/05/15/45741533/</link>
      <pubDate>Fri, 15 May 2015 11:32:20 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2015/05/15/45741533/</guid>
      <description>###常见的，不一定是最好的 说到返回随机行，很人一般会想到用GUID来排序，这是网上最常用的解决方案： Select Top 100 * From Sales.SalesOrderDetail Order By NewID() 但是这个方案的性能并</description>
    </item>
    
    <item>
      <title>关于PL/SQL Developer的配置与快速迁移</title>
      <link>https://vincent-233.github.io/2015/05/04/45478729/</link>
      <pubDate>Mon, 04 May 2015 05:17:50 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2015/05/04/45478729/</guid>
      <description>PL/SQL Developer是用得比较多的ORACLE开发工具，一般在使用时都会对此软件进行个性化配置，比如快捷键、代码提示与自动补全等，但是每次新</description>
    </item>
    
    <item>
      <title>用Powershell对文件批量重命名</title>
      <link>https://vincent-233.github.io/2015/02/08/43637581/</link>
      <pubDate>Sun, 08 Feb 2015 08:25:19 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2015/02/08/43637581/</guid>
      <description>需求：将D盘For PS文件夹下的A.txt文件重命名为aa.txt rename-Item &amp;#39;D:\For PS\A.txt&amp;#39; -NewName &amp;#39;aa.txt&amp;#39; 需求：将D盘For PS文件夹下的所有的txt文件改为html文件</description>
    </item>
    
    <item>
      <title>SQL Server 中Merge 的使用</title>
      <link>https://vincent-233.github.io/2014/12/30/42275987/</link>
      <pubDate>Tue, 30 Dec 2014 15:00:04 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2014/12/30/42275987/</guid>
      <description>很多人都知道ORACLE中有Merge关键字，其实SQL Server从2008版本开始也支持Merge了。 从而也可以像ORACLE一样在一条</description>
    </item>
    
    <item>
      <title>ORACLE递归查询</title>
      <link>https://vincent-233.github.io/2014/07/26/38146339/</link>
      <pubDate>Sat, 26 Jul 2014 08:36:10 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2014/07/26/38146339/</guid>
      <description>ORACLE支持常规的用CTE递归的方式实现递归查询，也有自己特有的查询方式，ORACLE文档中叫层次数据查询。这里通过一个简单的例子来介绍</description>
    </item>
    
    <item>
      <title>ORACLE列值合并</title>
      <link>https://vincent-233.github.io/2014/07/26/38145329/</link>
      <pubDate>Sat, 26 Jul 2014 07:46:40 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2014/07/26/38145329/</guid>
      <description>合并列值最通用的方法就是写一个自定义函数去实现，这里介绍的是其他方法。 准备数据 CREATE TABLE MyTest(xType NUMBER,City varchar2(200)); / INSERT INTO MyTest(xType,City) SELECT 1,&amp;#39;北京&amp;#39; FROM dual UNION ALL SELECT 1,</description>
    </item>
    
    <item>
      <title>ORACLE字符串拆分</title>
      <link>https://vincent-233.github.io/2014/07/26/38139137/</link>
      <pubDate>Sat, 26 Jul 2014 01:24:56 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2014/07/26/38139137/</guid>
      <description>方法1 - 创建拆分函数 ORACLE的函数不能像MSSQL那样支持直接返回表类型，所以要先创建一种自定义类型。这里用到的是嵌套表（Nested T</description>
    </item>
    
    <item>
      <title>SQL Server无法删除数据库的解决方法</title>
      <link>https://vincent-233.github.io/2014/07/11/37717375/</link>
      <pubDate>Fri, 11 Jul 2014 18:41:45 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2014/07/11/37717375/</guid>
      <description>思路：先删除与此数据库连接的进程，再删除数据库 直接上脚本： -- 删除与此数据库相关的连接 DECLARE @sql VARCHAR(4000) SELECT @sql = ISNULL(@sql,&amp;#39;&amp;#39;) + &amp;#39;kill &amp;#39; + LTRIM(spid) + CHAR(13) from sysprocesses WHERE dbid = DB_ID(&amp;#39;DB_Name&amp;#39;) EXEC(@sql) -- 删除与此数据</description>
    </item>
    
    <item>
      <title>断号查询（查找不连续ID记录）</title>
      <link>https://vincent-233.github.io/2014/05/18/26179859/</link>
      <pubDate>Sun, 18 May 2014 16:06:25 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2014/05/18/26179859/</guid>
      <description>需求：找出某列断流的ID号. 例如：1，2，7，8，9. 断流的ID是 3 至 6. 直接上代码算了： 不分组，单列： IF object_ID(&amp;#39;tempdb..#Tab&amp;#39;) IS NOT NULL DROP TABLE #Tab CREATE TABLE #Tab(ID INT) GO INSERT #Tab(ID) SELECT 1 UNION ALL</description>
    </item>
    
    <item>
      <title>SQL Server自增列（Identity列）的所有操作</title>
      <link>https://vincent-233.github.io/2014/04/13/23562967/</link>
      <pubDate>Sun, 13 Apr 2014 06:13:58 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2014/04/13/23562967/</guid>
      <description>一、定义 在CREATE TABLE 中： CREATE TABLE dbo.Identity_test ( ID INT IDENTITY(1,1), --(seed = 1,increment = 1) 从1开始,每次递增1 Content NVARCHAR(200) ) 在SELECT INTO 中： SELECT IDENTITY(INT,100,1) ID, ColName INTO #temp FROM TableName 二、自增列属性函数 一个表最</description>
    </item>
    
    <item>
      <title>为什么要刷新视图</title>
      <link>https://vincent-233.github.io/2014/03/23/21862313/</link>
      <pubDate>Sun, 23 Mar 2014 03:29:18 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2014/03/23/21862313/</guid>
      <description>1.问题描述 有时候会出现这样的情况：从视图中select 出的数据和直接用创建视图的语句选出的数据有差异。 很多人第一次遇到此情况时，会非常惊讶</description>
    </item>
    
    <item>
      <title>Microsoft.ACE.OLEDB.12.0 及其在 MSSQL中的使用</title>
      <link>https://vincent-233.github.io/2014/02/08/19000277/</link>
      <pubDate>Sat, 08 Feb 2014 18:47:50 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2014/02/08/19000277/</guid>
      <description>1.Microsoft.ACE.OLEDB.12.0 简介 实施上就是一个数据访问接口，用于在office文件和非office应用程序间传输数据。例如Microsoft Office Access 2010（.mdb和.</description>
    </item>
    
    <item>
      <title>SQL Server 2005 无日志文件附加数据库</title>
      <link>https://vincent-233.github.io/2013/12/27/17620647/</link>
      <pubDate>Fri, 27 Dec 2013 14:43:35 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2013/12/27/17620647/</guid>
      <description>虽然目前本人用的是2008R2，但很多客户仍然还是2005版本的，所以还是将这篇文章转过来，以备不时之需。在2008下附加2005的mdf应</description>
    </item>
    
    <item>
      <title>SQL递归查询实战</title>
      <link>https://vincent-233.github.io/2013/12/10/17251887/</link>
      <pubDate>Tue, 10 Dec 2013 16:12:08 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2013/12/10/17251887/</guid>
      <description>假设某公司的人员组织结构如下图： 数据库表： CREATE TABLE ORG ( EMPID INT NOT NULL, EMPNAME VARCHAR(128) NOT NULL, MGRID INT NOT NULL ); GO INSERT INTO ORG VALUES(1, &amp;#39;Jack&amp;#39;, 0); INSERT INTO ORG VALUES(2, &amp;#39;Mary&amp;#39;, 1); INSERT INTO ORG VALUES(3, &amp;#39;Tom&amp;#39;, 1); INSERT INTO ORG VALUES(4, &amp;#39;Ben&amp;#39;, 2); INSERT INTO ORG VALUES(5, &amp;#39;John&amp;#39;, 3); INSERT</description>
    </item>
    
    <item>
      <title>奇葩的需求</title>
      <link>https://vincent-233.github.io/2013/12/09/17231863/</link>
      <pubDate>Mon, 09 Dec 2013 15:18:18 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2013/12/09/17231863/</guid>
      <description>生成测试数据： CREATE TABLE [dbo].[aa]( [a] [nchar](10) NULL, [b] [nvarchar](50) NULL, [c] [nvarchar](50) NULL ) ON [PRIMARY] GO INSERT INTO aa VALUES (&amp;#39;a&amp;#39;,&amp;#39;杨静,马丽萍&amp;#39;, &amp;#39;美容师,美体师&amp;</description>
    </item>
    
    <item>
      <title>SQL行转列与列转行</title>
      <link>https://vincent-233.github.io/2013/12/08/17202973/</link>
      <pubDate>Sun, 08 Dec 2013 10:44:16 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2013/12/08/17202973/</guid>
      <description>先准备点数据： CREATE TABLE Sell ( [Year] INT, [Quarter] NVARCHAR(10), Quantity INT ) GO INSERT INTO Sell SELECT 2006, &amp;#39;Q1&amp;#39;, 20 UNION ALL SELECT 2006, &amp;#39;Q2&amp;#39;, 15 UNION ALL SELECT 2006, &amp;#39;Q2&amp;#39;, 4 UNION ALL SELECT 2006, &amp;#39;Q3&amp;#39;, 12 UNION ALL SELECT 2006, &amp;#39;Q4&amp;#39;, 18 UNION ALL SELECT 2007, &amp;#39;Q1&amp;#39;, 10 UNION ALL SELECT 2007, &amp;#39;Q2&amp;#39;, 10 UNION ALL SELECT 2008, &amp;#39;Q1&amp;#39;, 8 UNION ALL</description>
    </item>
    
    <item>
      <title>Sql提取(去除)字符串中所有汉字、字母、数字</title>
      <link>https://vincent-233.github.io/2013/11/23/16911599/</link>
      <pubDate>Sat, 23 Nov 2013 16:37:54 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2013/11/23/16911599/</guid>
      <description>核心思想在于下面几个模式的组合使用： %[0-9]%： 所有数字 %[A-Za-z]%: 所有字母 %[吖-咗]%: 所有汉字 1. 去除汉字(字母、数字)： 举出一例，其他类似：</description>
    </item>
    
    <item>
      <title>关于Cross Join 和 Outer/Cross Apply</title>
      <link>https://vincent-233.github.io/2013/11/23/16897427/</link>
      <pubDate>Sat, 23 Nov 2013 02:22:07 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2013/11/23/16897427/</guid>
      <description>先为大家准备点数据： CREATE TABLE TA(Acol INT); GO INSERT INTO TA SELECT 1 UNION ALL SELECT 2; GO CREATE TABLE TB(Bcol1 INT,Bcol2 VARCHAR(10)); GO INSERT INTO TB SELECT -1, &amp;#39;a&amp;#39; UNION ALL SELECT 1, &amp;#39;b&amp;#39; UNION ALL SELECT 3, &amp;#39;c&amp;#39;; GO 1. Cross Join Cross Join，交叉联接，其实就是笛卡尔积</description>
    </item>
    
    <item>
      <title>关于SQL Server 排序规则</title>
      <link>https://vincent-233.github.io/2013/11/17/16645847/</link>
      <pubDate>Sun, 17 Nov 2013 14:18:46 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2013/11/17/16645847/</guid>
      <description>今天写一SQL语句时，被提示&amp;quot; 无法解决 equal to操作中 &amp;ldquo;SQL_Latin1_General_CP1_CI_AS&amp;quot</description>
    </item>
    
    <item>
      <title>SQL 递归查询初体验</title>
      <link>https://vincent-233.github.io/2013/11/03/14111219/</link>
      <pubDate>Sun, 03 Nov 2013 16:00:25 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2013/11/03/14111219/</guid>
      <description>需求： 有如下一张职员上司表，要求给一个职工名，返回他直接或间接管理的所有职工名，写一个函数实现。 分析： 员工的下属也可能是其他员工的上司，即下</description>
    </item>
    
    <item>
      <title>字符串拆分为列表（函数）</title>
      <link>https://vincent-233.github.io/2013/10/20/12889707/</link>
      <pubDate>Sun, 20 Oct 2013 13:56:03 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2013/10/20/12889707/</guid>
      <description>今天试著自己实现了将字符串拆分为列表的功能，中间也有找一些资料，但我知道光看是没有用的，必须要自己试著实现印象才会深刻，必须要在实现过程中遇</description>
    </item>
    
    <item>
      <title>Excel中查找最后一个匹配字符的位置</title>
      <link>https://vincent-233.github.io/2013/08/05/9763867/</link>
      <pubDate>Mon, 05 Aug 2013 03:26:24 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2013/08/05/9763867/</guid>
      <description>Excel中的 find 或 search 函数均只能寻找到第一个匹配字符的位置，如A2单位格&amp;quot;I have a dream&amp;quot;, find(&amp;quot; &amp;ldquo;,A2)返回2，如果要找最后一个空</description>
    </item>
    
    <item>
      <title>SQL练习题（2）</title>
      <link>https://vincent-233.github.io/2013/07/27/9532985/</link>
      <pubDate>Sat, 27 Jul 2013 14:43:45 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2013/07/27/9532985/</guid>
      <description>设教务管理系统中有3个基本表： 学生信息表 S(SNO, SNAME, AGE, SEX) ，其属性分别表示学号、学生姓名、年龄和性别； 课程信息表 C(CNO, CNAME, CTEACHER) ，其属性分别表示课程号、课程名称</description>
    </item>
    
    <item>
      <title>倒水问题</title>
      <link>https://vincent-233.github.io/2013/07/23/9428537/</link>
      <pubDate>Tue, 23 Jul 2013 13:50:40 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2013/07/23/9428537/</guid>
      <description>今日又试著刷了一道CSDN英雄会的题，可惜挑战失败，但不管怎样，在寻求解决方案的过程中也是有不少收获的。 有两个容器，容积分别为A升和B升，有</description>
    </item>
    
    <item>
      <title>面试逻辑题</title>
      <link>https://vincent-233.github.io/2013/07/07/9263455/</link>
      <pubDate>Sun, 07 Jul 2013 08:13:43 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2013/07/07/9263455/</guid>
      <description>1. 工人工作7天，给工人的回报是一根金条，金条平分成相连的7段，必须在每天结束时给他们一段金条，如果只允许两次把金条弄断，如何给工人付费？ 答：</description>
    </item>
    
    <item>
      <title>SQL练习题（1）</title>
      <link>https://vincent-233.github.io/2013/07/03/9237409/</link>
      <pubDate>Wed, 03 Jul 2013 14:28:57 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/2013/07/03/9237409/</guid>
      <description>1. 查询每一年加之前年份的积累销售额。比如查询2003年的，就是将2003的销售金额加上以前的销售金额。 原始数据： id ta_year ta_num 1 2001 500 2 2002 300 3 2003 600 查询</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-233.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/about/</guid>
      <description>About Me 我是一名数据库开发工程师/ETL工程师/数据仓库工作师/数据工程师。 对基于MSSQL的数据库脚本开发比较熟练，也用过其他RDBMS，熟悉</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-233.github.io/1/01/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/1/01/01/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Archives</title>
      <link>https://vincent-233.github.io/archive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-233.github.io/archive/</guid>
      <description>历史文章按照年月归档</description>
    </item>
    
  </channel>
</rss>
